Suite/Test/Step Name,Browser,Description,Start time,End time,Duration,Status
Rest API Integration Tests,,,2019-01-18 16:17:18,2019-01-18 16:17:47,28.938s,FAILED
,,,,,,
Test Cases/1GetCategories,,,2019-01-18 16:17:18,2019-01-18 16:17:21,2.945s,PASSED
"sendRequestAndVerify(findTestObject(""Get categories""))",,,2019-01-18 16:17:19,2019-01-18 16:17:21,2.643s,PASSED
,,,,,,
Test Cases/2GetProducts,,,2019-01-18 16:17:21,2019-01-18 16:17:25,3.421s,PASSED
"sendRequestAndVerify(findTestObject(""Add product"", [""productName"":""Produkt_testowy1""]))",,,2019-01-18 16:17:21,2019-01-18 16:17:22,0.922s,PASSED
"sendRequestAndVerify(findTestObject(""Add product"", [""productName"":""Produkt_testowy2""]))",,,2019-01-18 16:17:22,2019-01-18 16:17:23,0.559s,PASSED
"response = sendRequestAndVerify(findTestObject(""Get products"", [""productsNames"":[""Produkt_testowy1"", ""Produkt_testowy2""]]))",,,2019-01-18 16:17:23,2019-01-18 16:17:23,0.593s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:23,2019-01-18 16:17:23,0.002s,PASSED
products = jsonSlurper.parseText(response.getResponseText()),,,2019-01-18 16:17:23,2019-01-18 16:17:24,0.002s,PASSED
p1 = products.find({ java.lang.Object p -> ... }),,,2019-01-18 16:17:24,2019-01-18 16:17:24,0.002s,PASSED
p2 = products.find({ java.lang.Object p -> ... }),,,2019-01-18 16:17:24,2019-01-18 16:17:24,0.002s,PASSED
if (p1 != null),,,2019-01-18 16:17:24,2019-01-18 16:17:24,0.607s,PASSED
if (p2 != null),,,2019-01-18 16:17:24,2019-01-18 16:17:25,0.596s,PASSED
,,,,,,
Test Cases/3AddProduct,,,2019-01-18 16:17:25,2019-01-18 16:17:27,2.278s,PASSED
"sendRequest(findTestObject(""Add product"", [""productName"":""Produkt_testowy3""]))",,,2019-01-18 16:17:25,2019-01-18 16:17:26,0.805s,PASSED
"response = sendRequest(findTestObject(""Get products"", [""productsNames"":[]]))",,,2019-01-18 16:17:26,2019-01-18 16:17:26,0.436s,PASSED
"sendRequest(findTestObject(""Delete product"", [""productId"":""""]))",,,2019-01-18 16:17:26,2019-01-18 16:17:26,0.360s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:26,2019-01-18 16:17:26,0.001s,PASSED
products = jsonSlurper.parseText(response.getResponseText()),,,2019-01-18 16:17:26,2019-01-18 16:17:26,0.000s,PASSED
p3 = products.find({ java.lang.Object p -> ... }),,,2019-01-18 16:17:26,2019-01-18 16:17:26,0.001s,PASSED
"assert p3 != null : ""Produkt_testowy3 does not exist""",,,2019-01-18 16:17:26,2019-01-18 16:17:26,0.001s,PASSED
"sendRequestAndVerify(findTestObject(""Delete product"", [""productId"":$p3.id]))",,,2019-01-18 16:17:26,2019-01-18 16:17:27,0.552s,PASSED
"assert name == ""Produkt_testowy3"" : ""Name property is not 'Produkt_testowy3'""",,,2019-01-18 16:17:27,2019-01-18 16:17:27,0.001s,PASSED
"assert products_quantity == 12 : ""products_quantity property is not 12""",,,2019-01-18 16:17:27,2019-01-18 16:17:27,0.000s,PASSED
"assert price == 123 : ""price property is not 123""",,,2019-01-18 16:17:27,2019-01-18 16:17:27,0.001s,PASSED
"assert description == ""opis"" : ""description property is not 'opis""",,,2019-01-18 16:17:27,2019-01-18 16:17:27,0.000s,PASSED
"assert photo_url == ""https://cdn.shopify.com/s/files/1/0010/9215/7503/t/10/assets/cbt2/images/result-clipboard.png?1029388024731289939"" : ""photo_url property is not 'https://cdn.shopify.com/s/files/1/0010/9215/7503/t/10/assets/cbt2/images/result-clipboard.png?1029388024731289939""",,,2019-01-18 16:17:27,2019-01-18 16:17:27,0.001s,PASSED
"assert category == ""other"" : ""category property is not 'other""",,,2019-01-18 16:17:27,2019-01-18 16:17:27,0.000s,PASSED
,,,,,,
Test Cases/4GetProduct,,,2019-01-18 16:17:27,2019-01-18 16:17:30,2.713s,PASSED
"sendRequestAndVerify(findTestObject(""Add product"", [""productName"":""Produkt_testowy4""]))",,,2019-01-18 16:17:27,2019-01-18 16:17:28,0.922s,PASSED
"response = sendRequestAndVerify(findTestObject(""Get products"", [""productsNames"":[]]))",,,2019-01-18 16:17:28,2019-01-18 16:17:29,0.569s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.000s,PASSED
products = jsonSlurper.parseText(response.getResponseText()),,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.001s,PASSED
p4 = products.find({ java.lang.Object p -> ... }),,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.002s,PASSED
"assert p4 != null : ""Produkt_testowy4 does not exist""",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.000s,PASSED
"productResponse = sendRequestAndVerify(findTestObject(""Get product"", [""productId"":$p4.id]))",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.551s,PASSED
product = jsonSlurper.parseText(productResponse.getResponseText()),,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.000s,PASSED
"assert product != null : ""Produkt_testowy4 does not exist""",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.001s,PASSED
"assert name == ""Produkt_testowy4"" : ""Name property is not 'Produkt_testowy4'""",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.000s,PASSED
"assert products_quantity == 12 : ""products_quantity property is not 12""",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.000s,PASSED
"assert price == 123 : ""price property is not 123""",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.000s,PASSED
"assert description == ""opis"" : ""description property is not 'opis""",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.000s,PASSED
"assert photo_url == ""https://cdn.shopify.com/s/files/1/0010/9215/7503/t/10/assets/cbt2/images/result-clipboard.png?1029388024731289939"" : ""photo_url property is not 'https://cdn.shopify.com/s/files/1/0010/9215/7503/t/10/assets/cbt2/images/result-clipboard.png?1029388024731289939""",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.001s,PASSED
"assert category == ""other"" : ""category property is not 'other""",,,2019-01-18 16:17:29,2019-01-18 16:17:29,0.001s,PASSED
"sendRequestAndVerify(findTestObject(""Delete product"", [""productId"":$p4.id]))",,,2019-01-18 16:17:29,2019-01-18 16:17:30,0.546s,PASSED
,,,,,,
Test Cases/5DeleteProduct,,,2019-01-18 16:17:30,2019-01-18 16:17:32,2.458s,FAILED
"sendRequestAndVerify(findTestObject(""Add product"", [""productName"":""Produkt_testowy5""]))",,,2019-01-18 16:17:30,2019-01-18 16:17:31,0.764s,PASSED
"response = sendRequestAndVerify(findTestObject(""Get products"", [""productsNames"":[]]))",,,2019-01-18 16:17:31,2019-01-18 16:17:31,0.583s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:31,2019-01-18 16:17:31,0.001s,PASSED
products = jsonSlurper.parseText(response.getResponseText()),,,2019-01-18 16:17:31,2019-01-18 16:17:31,0.000s,PASSED
p5 = products.find({ java.lang.Object p -> ... }),,,2019-01-18 16:17:31,2019-01-18 16:17:31,0.002s,PASSED
"assert p5 != null : ""Produkt_testowy5 does not exist""",,,2019-01-18 16:17:31,2019-01-18 16:17:31,0.000s,PASSED
"sendRequestAndVerify(findTestObject(""Delete product"", [""productId"":$p5.id]))",,,2019-01-18 16:17:31,2019-01-18 16:17:32,0.550s,PASSED
"response = sendRequest(findTestObject(""Get product"", [""productId"":$p5.id]))",,,2019-01-18 16:17:32,2019-01-18 16:17:32,0.420s,PASSED
"assert response.getResponseText() == ""null"" : ""Response text is not null""",,,2019-01-18 16:17:32,2019-01-18 16:17:32,0.002s,PASSED
"verifyResponseStatusCode(response, 404)",,,2019-01-18 16:17:32,2019-01-18 16:17:32,0.010s,FAILED
,,,,,,
Test Cases/6PutProduct,,,2019-01-18 16:17:32,2019-01-18 16:17:35,3.104s,PASSED
"sendRequestAndVerify(findTestObject(""Add product"", [""productName"":""Produkt_testowy6""]))",,,2019-01-18 16:17:32,2019-01-18 16:17:33,0.788s,PASSED
"response = sendRequestAndVerify(findTestObject(""Get products"", [""productsNames"":[]]))",,,2019-01-18 16:17:33,2019-01-18 16:17:34,0.564s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:34,2019-01-18 16:17:34,0.000s,PASSED
products = jsonSlurper.parseText(response.getResponseText()),,,2019-01-18 16:17:34,2019-01-18 16:17:34,0.001s,PASSED
p6 = products.find({ java.lang.Object p -> ... }),,,2019-01-18 16:17:34,2019-01-18 16:17:34,0.001s,PASSED
"assert p6 != null : ""Produkt_testowy6 does not exist""",,,2019-01-18 16:17:34,2019-01-18 16:17:34,0.001s,PASSED
"sendRequestAndVerify(findTestObject(""Put product"", [""productId"":$p6.id, ""name"":$p6.name, ""description"":""opis_edytowany"", ""products_quantity"":10, ""price"":12, ""category"":""sport""]))",,,2019-01-18 16:17:34,2019-01-18 16:17:34,0.584s,PASSED
"productResponse = sendRequestAndVerify(findTestObject(""Get product"", [""productId"":$p6.id]))",,,2019-01-18 16:17:34,2019-01-18 16:17:35,0.525s,PASSED
product = jsonSlurper.parseText(productResponse.getResponseText()),,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.000s,PASSED
"assert product != null : ""Produkt_testowy6 does not exist""",,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.001s,PASSED
"assert name == ""Produkt_testowy6"" : ""Name property is not 'Produkt_testowy6'""",,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.000s,PASSED
"assert products_quantity == 10 : ""products_quantity property is not 10""",,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.000s,PASSED
"assert price == 12 : ""price property is not 12""",,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.000s,PASSED
"assert description == ""opis_edytowany"" : ""description property is not 'opis_edytowany""",,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.000s,PASSED
"assert photo_url == ""https://cdn.shopify.com/s/files/1/0010/9215/7503/t/10/assets/cbt2/images/result-clipboard.png?1029388024731289939"" : ""photo_url property is not 'https://cdn.shopify.com/s/files/1/0010/9215/7503/t/10/assets/cbt2/images/result-clipboard.png?1029388024731289939""",,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.000s,PASSED
"assert category == ""sport"" : ""category property is not 'sport""",,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.000s,PASSED
"sendRequestAndVerify(findTestObject(""Delete product"", [""productId"":$p6.id]))",,,2019-01-18 16:17:35,2019-01-18 16:17:35,0.547s,PASSED
,,,,,,
Test Cases/7GetOrders,,,2019-01-18 16:17:35,2019-01-18 16:17:39,3.257s,PASSED
"responseOrder1 = sendRequestAndVerify(findTestObject(""Add order""))",,,2019-01-18 16:17:35,2019-01-18 16:17:36,1.005s,PASSED
"responseOrder2 = sendRequestAndVerify(findTestObject(""Add order""))",,,2019-01-18 16:17:36,2019-01-18 16:17:37,0.533s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:37,2019-01-18 16:17:37,0.000s,PASSED
order1 = jsonSlurper.parseText(responseOrder1.getResponseText()),,,2019-01-18 16:17:37,2019-01-18 16:17:37,0.001s,PASSED
order2 = jsonSlurper.parseText(responseOrder2.getResponseText()),,,2019-01-18 16:17:37,2019-01-18 16:17:37,0.000s,PASSED
"responseOrders = sendRequestAndVerify(findTestObject(""Get orders"", [""ordersIds"":[$order1.id, $order2.id]]))",,,2019-01-18 16:17:37,2019-01-18 16:17:37,0.548s,PASSED
"sendRequestAndVerify(findTestObject(""Delete order"", [""orderId"":$order1.id]))",,,2019-01-18 16:17:37,2019-01-18 16:17:38,0.547s,PASSED
"sendRequestAndVerify(findTestObject(""Delete order"", [""orderId"":$order2.id]))",,,2019-01-18 16:17:38,2019-01-18 16:17:39,0.534s,PASSED
,,,,,,
Test Cases/8AddOrder,,,2019-01-18 16:17:39,2019-01-18 16:17:41,1.971s,PASSED
"responseOrder = sendRequestAndVerify(findTestObject(""Add order""))",,,2019-01-18 16:17:39,2019-01-18 16:17:39,0.774s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:39,2019-01-18 16:17:39,0.000s,PASSED
order = jsonSlurper.parseText(responseOrder.getResponseText()),,,2019-01-18 16:17:39,2019-01-18 16:17:39,0.001s,PASSED
"response = sendRequestAndVerify(findTestObject(""Get order"", [""orderId"":$order.id]))",,,2019-01-18 16:17:39,2019-01-18 16:17:40,0.539s,PASSED
"sendRequestAndVerify(findTestObject(""Delete order"", [""orderId"":$order.id]))",,,2019-01-18 16:17:40,2019-01-18 16:17:41,0.538s,PASSED
resultOrder = jsonSlurper.parseText(response.getResponseText()),,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert email == ""admin@shop.com"" : ""Email should be admin@shop.com""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert firstName == ""Jan"" : ""First name should be Jan""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert lastName == ""Kowalski"" : ""Last name should be Kowalski""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert city == ""Kraków"" : ""City should be Kraków""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert street == ""Czarnowiejska, 12"" : ""Street should be Czarnowiejska, 12""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert postalCode == ""32-054"" : ""Postal code should be 32-054""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert totalValue == 84 : ""Total value should be 84""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert state == ""Waiting"" : ""State should be Waiting""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
"assert products.size() == 1 : ""Products list size should be 1""",,,2019-01-18 16:17:41,2019-01-18 16:17:41,0.000s,PASSED
,,,,,,
Test Cases/9GetOrder,,,2019-01-18 16:17:41,2019-01-18 16:17:43,2.191s,PASSED
"responseOrder = sendRequestAndVerify(findTestObject(""Add order""))",,,2019-01-18 16:17:41,2019-01-18 16:17:42,1.034s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:42,2019-01-18 16:17:42,0.000s,PASSED
order = jsonSlurper.parseText(responseOrder.getResponseText()),,,2019-01-18 16:17:42,2019-01-18 16:17:42,0.001s,PASSED
"response = sendRequestAndVerify(findTestObject(""Get order"", [""orderId"":$order.id]))",,,2019-01-18 16:17:42,2019-01-18 16:17:42,0.543s,PASSED
"sendRequestAndVerify(findTestObject(""Delete order"", [""orderId"":$order.id]))",,,2019-01-18 16:17:42,2019-01-18 16:17:43,0.537s,PASSED
resultOrder = jsonSlurper.parseText(response.getResponseText()),,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
"assert email == ""admin@shop.com"" : ""Email should be admin@shop.com""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
"assert firstName == ""Jan"" : ""First name should be Jan""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.001s,PASSED
"assert lastName == ""Kowalski"" : ""Last name should be Kowalski""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
"assert city == ""Kraków"" : ""City should be Kraków""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
"assert street == ""Czarnowiejska, 12"" : ""Street should be Czarnowiejska, 12""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
"assert postalCode == ""32-054"" : ""Postal code should be 32-054""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
"assert totalValue == 84 : ""Total value should be 84""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
"assert state == ""Waiting"" : ""State should be Waiting""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
"assert products.size() == 1 : ""Products list size should be 1""",,,2019-01-18 16:17:43,2019-01-18 16:17:43,0.000s,PASSED
,,,,,,
Test Cases/10DeleteOrder,,,2019-01-18 16:17:43,2019-01-18 16:17:45,1.875s,FAILED
"responseOrder = sendRequestAndVerify(findTestObject(""Add order""))",,,2019-01-18 16:17:43,2019-01-18 16:17:44,0.846s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:44,2019-01-18 16:17:44,0.000s,PASSED
order = jsonSlurper.parseText(responseOrder.getResponseText()),,,2019-01-18 16:17:44,2019-01-18 16:17:44,0.000s,PASSED
"sendRequestAndVerify(findTestObject(""Delete order"", [""orderId"":$order.id]))",,,2019-01-18 16:17:44,2019-01-18 16:17:44,0.523s,PASSED
"response = sendRequest(findTestObject(""Get order"", [""orderId"":$order.id]))",,,2019-01-18 16:17:44,2019-01-18 16:17:45,0.423s,PASSED
"assert response.getResponseText() == ""null"" : ""Response should be null""",,,2019-01-18 16:17:45,2019-01-18 16:17:45,0.000s,PASSED
"verifyResponseStatusCode(response, 404)",,,2019-01-18 16:17:45,2019-01-18 16:17:45,0.001s,FAILED
,,,,,,
Test Cases/11PutOrder,,,2019-01-18 16:17:45,2019-01-18 16:17:47,2.449s,PASSED
"responseOrder = sendRequestAndVerify(findTestObject(""Add order""))",,,2019-01-18 16:17:45,2019-01-18 16:17:45,0.735s,PASSED
jsonSlurper = new groovy.json.JsonSlurper(),,,2019-01-18 16:17:45,2019-01-18 16:17:45,0.000s,PASSED
order = jsonSlurper.parseText(responseOrder.getResponseText()),,,2019-01-18 16:17:45,2019-01-18 16:17:45,0.001s,PASSED
"sendRequestAndVerify(findTestObject(""Put order"", [""orderId"":$order.id, ""state"":""In realization""]))",,,2019-01-18 16:17:45,2019-01-18 16:17:46,0.540s,PASSED
"response = sendRequestAndVerify(findTestObject(""Get order"", [""orderId"":$order.id]))",,,2019-01-18 16:17:46,2019-01-18 16:17:46,0.545s,PASSED
"sendRequestAndVerify(findTestObject(""Delete order"", [""orderId"":$order.id]))",,,2019-01-18 16:17:46,2019-01-18 16:17:47,0.542s,PASSED
resultOrder = jsonSlurper.parseText(response.getResponseText()),,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
"assert email == ""admin@shop.com"" : ""Email should be admin@shop.com""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
"assert firstName == ""Jan"" : ""First name should be Jan""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
"assert lastName == ""Kowalski"" : ""Last name should be Kowalski""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
"assert city == ""Kraków"" : ""City should be Kraków""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
"assert street == ""Czarnowiejska, 12"" : ""Street should be Czarnowiejska, 12""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.001s,PASSED
"assert postalCode == ""32-054"" : ""Postal code should be 32-054""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
"assert totalValue == 84 : ""Total value should be 84""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
"assert state == ""In realization"" : ""State should be In realization""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
"assert products.size() == 1 : ""Products list size should be 1""",,,2019-01-18 16:17:47,2019-01-18 16:17:47,0.000s,PASSED
